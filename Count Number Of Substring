class Solution {
public:
    long substrCount(string S, int K) {
        return atmost(S, K) - atmost(S, K - 1);
    } 

    long atmost(string s, int k) {
        vector<int> arr(26, 0);
        int dist = 0, left = 0;
        long res = 0;

        for (int i = 0; i < s.length(); ++i) {
            arr[s[i] - 'a']++;
            if (arr[s[i] - 'a'] == 1) dist++;

            while (dist > k) {
                arr[s[left] - 'a']--;
                if (arr[s[left] - 'a'] == 0) dist--;
                left++;
            }

            res += (i - left + 1);   // in result supoose we have 1 then next time it becomes 2 besically next substring have choice of append or not apppend //
        }
        return res; 
    }
};
